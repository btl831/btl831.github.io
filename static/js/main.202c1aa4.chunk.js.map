{"version":3,"sources":["AlertSong.js","Google_login.js","Write.js","Developer.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["InfoModal","props","useState","show","setShow","handleClose","Button","className","variant","onClick","Modal","onHide","centered","Body","url","곡","link","width","height","playing","controls","song","Footer","GoogleButton","onSocial","onSuccess","response","a","console","log","googleId","profileObj","email","name","socialId","socialType","nickname","clientId","responseType","onFailure","error","WritePage","InputGroup","Text","id","FormControl","as","onclick","Developer_intro","Card_Jumbo","Card","style","Img","src","Title","singer","i","Recommend","Figure","Image","alt","Caption","Chart","Table","striped","bordered","hover","차트정보","map","Community","ListGroup","Item","App","history","useHistory","loading","setLoading","차트정보변경","cardpage","useEffect","document","querySelector","innerHTML","axios","get","then","result","data","catch","Spinner","animation","rel","href","integrity","crossorigin","Navbar","bg","NavDropdown","title","Divider","Container","to","Brand","exact","path","Carousel","k","y","Row","slice","undefined","class","goBack","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"kVAKe,SAASA,EAAUC,GAChC,MAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAc,kBAAMD,GAAQ,IAGlC,OACE,qCACE,cAACE,EAAA,EAAD,CAAQC,UAAU,aAAaC,QAAQ,YAAYC,QAJpC,kBAAML,GAAQ,IAI7B,qBAGA,eAACM,EAAA,EAAD,CAAOP,KAAMA,EAAMQ,OAAQN,EACpBO,UAAQ,EADf,UAGE,cAACN,EAAA,EAAD,CAAQE,QAAQ,YAAYC,QAASJ,EAArC,mBAKA,cAACK,EAAA,EAAMG,KAAP,UACI,sBAAKN,UAAY,MAAjB,UACA,qBAAKA,UAAU,QAAf,SACE,cAAC,IAAD,CACAO,IAAOb,EAAMc,OAAEC,KACfC,MAAM,OACNC,OAAO,OACPC,SAAO,EAACC,UAAQ,MAElB,sBAAKb,UAAW,QAAhB,4BACON,EAAMc,OAAEM,aAMnB,cAACX,EAAA,EAAMY,OAAP,U,8CC/BO,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,SAC7BC,EAAS,uCAAG,WAAMC,GAAN,qBAAAC,EAAA,6DACjBC,QAAQC,IAAIH,GAEDI,EAA2CJ,EAA3CI,SAHM,EAGqCJ,EAAjCK,WAAeC,EAHnB,EAGmBA,MAAOC,EAH1B,EAG0BA,KAH1B,SAKRT,EAAS,CACXU,SAAWJ,EACXK,WAAa,SACbH,QACAI,SAAWH,IATD,2CAAH,sDAiBf,OACI,8BACI,cAAC,IAAD,CACII,SAvBC,2EAwBDC,aAAc,WACdb,UAAWA,EACXc,UAVM,SAACC,GACfZ,QAAQC,IAAIW,Q,sBCpBL,SAASC,IACpB,OACI,qCACA,sBAAKlC,UAAU,MAAf,UAEA,eAACmC,EAAA,EAAD,CAAYnC,UAAU,OAAtB,UACI,cAACmC,EAAA,EAAWC,KAAZ,CAAiBC,GAAG,QAApB,0BACA,cAACC,EAAA,EAAD,CACA,aAAW,eACX,mBAAiB,iCAGrB,eAACH,EAAA,EAAD,CAAYnC,UAAU,OAAtB,UACI,cAACmC,EAAA,EAAWC,KAAZ,CAAiBC,GAAG,SAApB,gCACA,cAACC,EAAA,EAAD,CACA,aAAW,SACX,mBAAiB,iCAIrB,eAACH,EAAA,EAAD,WACC,cAACA,EAAA,EAAWC,KAAZ,CAAiBC,GAAI,UAArB,0BACA,cAACC,EAAA,EAAD,CAAaC,GAAG,WAAW,aAAW,uBAIvC,cAACxC,EAAA,EAAD,CAAQE,QAAQ,YAAYD,UAAU,YACrCwC,QAAS,aADV,6BC3BO,SAASC,IACpB,OACI,qCACA,mDACA,uBACA,mDACA,0BCgMR,SAASC,EAAWhD,GAClB,OACE,eAACiD,EAAA,EAAD,CAAMC,MAAO,CAAElC,MAAO,SAAWV,UAAU,cAA3C,UACE,cAAC2C,EAAA,EAAKE,IAAN,CAAU5C,QAAQ,MAAM6C,IAAI,UAAU9C,UAAU,SAChD,eAAC2C,EAAA,EAAKrC,KAAN,WACE,cAACqC,EAAA,EAAKI,MAAN,UAAarD,EAAMc,OAAEM,OACrB,cAAC6B,EAAA,EAAKP,KAAN,UACE,+CAAQ1C,EAAMc,OAAEwC,OAAhB,SAIF,cAAC,EAAD,CAAW,SAAGtD,EAAMc,OAAGyC,EAAGvD,EAAMuD,UAQxC,SAASC,IACP,OACE,eAACC,EAAA,EAAD,CAAQnD,UAAU,OAAlB,UACE,cAACmD,EAAA,EAAOC,MAAR,CACE1C,MAAO,IACPC,OAAQ,IACR0C,IAAI,UACJP,IAAI,oBAEN,cAACK,EAAA,EAAOG,QAAR,0IAON,SAASC,EAAM7D,GACb,OACE,eAAC8D,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAAC1D,QAAQ,OAAtC,UACE,gCACE,+BACE,8CACA,8CACA,8CACA,8CACA,mDAGJ,gCAGIP,EAAMkE,yBAAKC,KAAI,SAACzC,EAAG6B,GACjB,OACE,+BACE,6BAAK7B,EAAEiB,GAAK,IACZ,6BAAI,uBAAOS,IAAI,aACf,6BAAK1B,EAAEN,OACP,6BAAKM,EAAE4B,SACP,6BAAI,cAAC,EAAD,CAAW,SAAG5B,EAAG6B,EAAGA,iBAYxC,SAASa,IACP,OACE,eAACC,EAAA,EAAD,CAAW9D,QAAQ,QAAnB,UACE,cAAC8D,EAAA,EAAUC,KAAX,CAAgB/D,QAAQ,YAAxB,+CACA,cAAC8D,EAAA,EAAUC,KAAX,CAAgB/D,QAAQ,YAAxB,+CACA,cAAC8D,EAAA,EAAUC,KAAX,CAAgB/D,QAAQ,YAAxB,+CACA,cAAC8D,EAAA,EAAUC,KAAX,CAAgB/D,QAAQ,YAAxB,kDAMSgE,MA3Qf,WAEE,MAAiBtE,mBAAS,CAAC,EAAG,EAAG,IAAjC,mBACIuE,GADJ,UACcC,eACd,EAA4BxE,oBAAS,GAArC,mBAAKyE,EAAL,KAAcC,EAAd,KACA,EAAqB1E,mBAAS,IAA9B,mBAAKiE,EAAL,KAAWU,EAAX,KACI,EAA0B3E,mBAAS,CAAC,EAAG,EAAG,IAA9C,mBAAK4E,EAAL,KAYA,OAZA,KAEAC,qBAAU,WACUC,SAASC,cAAc,SAC/BC,UAAY,SAEtBC,IAAMC,IAAI,0CACPC,MAAK,SAACC,GAAa1D,QAAQC,IAAIyD,EAAOC,MAAOV,EAAOS,EAAOC,MAAOX,GAAW,MAC7EY,UAEF,IAECb,EAAiB,2DAAM,cAACc,EAAA,EAAD,CAASC,UAAU,SAASlF,QAAQ,UAAUD,UAAU,eAIjF,sBAAKA,UAAU,MAAf,UACE,+BACE,sBACEoF,IAAI,aACJC,KAAK,0EACLC,UAAU,0EACVC,YAAY,gBAKhB,eAACC,EAAA,EAAD,CAAQC,GAAG,OAAOxF,QAAQ,OAA1B,UACE,eAACyF,EAAA,EAAD,CAAaC,MAAM,WAAWtD,GAAG,qBAAjC,UACE,cAACqD,EAAA,EAAY1B,KAAb,CAAkBqB,KAAK,SAAvB,qBACA,cAACK,EAAA,EAAY1B,KAAb,CAAkBqB,KAAK,SAAvB,uCACA,cAACK,EAAA,EAAY1B,KAAb,CAAkBqB,KAAK,cAAvB,uCACA,cAACK,EAAA,EAAYE,QAAb,IACA,cAACF,EAAA,EAAY1B,KAAb,CAAkBqB,KAAK,aAAvB,gDAEF,eAACQ,EAAA,EAAD,WACE,cAAC,IAAD,CAAMC,GAAG,GAAT,SACE,eAACN,EAAA,EAAOO,MAAR,CAAcV,KAAK,QAAnB,UACE,qBACEhC,IAAI,GACJP,IAAI,YACJpC,MAAM,KACNC,OAAO,KACPX,UAAU,6BACT,IAPL,qBAYF,cAACgB,EAAD,UASJ,uBAAMhB,UAAU,OAAhB,UACE,sBAAKA,UAAU,YAAf,UAEE,eAAC,IAAD,CAAOgG,OAAK,EAACC,KAAK,IAAlB,UACE,sBAAKjG,UAAU,MAAf,UACE,uBAGA,cAACkG,EAAA,EAAD,CAAUlG,UAAU,WAApB,SAEIuE,EAASV,KAAI,SAACsC,EAAGC,GACf,OACE,cAACF,EAAA,EAASlC,KAAV,UACE,cAACqC,EAAA,EAAD,CAAKrG,UAAU,4BAAf,SAII4D,EAAK0C,MAAM,EAAEF,EAAE,GAAGA,EAAE,IAAIvC,KAAI,SAACzC,EAAG6B,GAC9B,OAAQ,cAACP,EAAD,CAAY,SAAGtB,EAAG6B,EAAGA,mBAa/C,uBACA,uBAIA,sBAAKjD,UAAU,MAAf,UACE,sBAAKA,UAAU,sBAAf,UACE,uBACA,oBAAIA,UAAU,OAAd,yCACA,uBACA,eAAC6F,EAAA,EAAD,CAAW7F,UAAU,MAArB,UACE,qBAAKA,UAAU,gBAAf,SACE,cAACkD,EAAD,MAGF,qBAAKlD,UAAU,gBAAf,SACE,cAACkD,EAAD,YAKN,sBAAKlD,UAAU,YAAf,UAEE,qBAAIA,UAAU,QAAd,6BACE,cAAC,IAAD,CAAM8F,GAAG,SAAT,SAAkB,cAAC/F,EAAA,EAAD,CAAQC,UAAU,YAAlB,qCAEpB,cAACuD,EAAD,CAAO,2BAAMK,EAAK0C,WAAMC,EAAW,WAGvC,uBAGA,sBAAKvG,UAAU,MAAf,UACE,oBAAIA,UAAW,YAAf,yDACA,cAAC,IAAD,CAAM8F,GAAG,SAAQ9F,UAAY,WAA7B,SAAwC,cAACD,EAAA,EAAD,yCAGxC,qBAAKC,UAAU,gBAAf,SACE,cAAC8D,EAAD,MAGF,qBAAK9D,UAAU,8BAAf,SACE,oJAQN,eAAC,IAAD,CAAOiG,KAAK,SAAZ,UACE,uBACA,cAAC1C,EAAD,CAAO,2BAAMK,EAAM5D,UAAU,kBAE/B,cAAC,IAAD,CAAOiG,KAAO,SAAd,SACE,sBAAKO,MAAQ,OAAb,UACE,uBACA,cAACtE,EAAD,IACA,cAACnC,EAAA,EAAD,CAAQG,QAAS,WAAKgE,EAAQuC,UAA9B,8CAKJ,cAAC,IAAD,CAAOR,KAAK,aAAZ,SACE,qBAAKO,MAAO,OAAZ,SACA,cAAC/D,EAAD,QAIJ,0BAQF,wBAAQzC,UAAU,eAAlB,SACE,qBAAKA,UAAU,YAAf,SACE,mBAAGA,UAAU,6BAAb,iDChLJ0G,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTnC,MAAK,SAACwC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BvG,QAAQC,IACN,+GAKE4F,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlBjG,QAAQC,IAAI,sCAGR4F,GAAUA,EAAOhG,WACnBgG,EAAOhG,UAAUoG,WAO5BrC,OAAM,SAAChD,GACNZ,QAAQY,MAAM,4CAA6CA,MC9FjE,IAYe6F,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBlD,MAAK,YAAkD,IAA/CmD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCEdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACA,cAAC,EAAD,QAGF/D,SAASgE,eAAe,SFKnB,SAAkBvB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIuB,IAAIC,GAAwB/B,OAAOC,SAASxB,MACpDuD,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,QAAQ,WAC9B,IAAM5B,EAAK,UAAM0B,GAAN,sBAEPjC,IAgEV,SAAiCO,EAAOC,GAEtC4B,MAAM7B,EAAO,CACX8B,QAAS,CAAE,iBAAkB,YAE5BjE,MAAK,SAAC3D,GAEL,IAAM6H,EAAc7H,EAAS4H,QAAQlE,IAAI,gBAEnB,MAApB1D,EAAS8H,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAMrE,MAAK,SAACwC,GAClCA,EAAa8B,aAAatE,MAAK,WAC7B8B,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1BjC,OAAM,WACL5D,QAAQC,IAAI,oEAtFVgI,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAMrE,MAAK,WACjCzD,QAAQC,IACN,+GAMJ0F,EAAgBC,EAAOC,OE3B/BqC,GAKAzB,K","file":"static/js/main.202c1aa4.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Modal, Button} from 'react-bootstrap';\nimport ReactPlayer from \"react-player\";\n\nexport default function InfoModal(props) {\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n  \n  return (\n    <>\n      <Button className=\"nextButton\" variant=\"secondary\" onClick={handleShow}>\n        Go Song\n      </Button>\n      <Modal show={show} onHide={handleClose}  \n             centered>\n        \n        <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          \n        \n        <Modal.Body>\n            <div className = \"row\">\n            <div className=\"col-6\"  >\n              <ReactPlayer\n              url = {props.곡.link} \n              width='100%'\n              height='100%'\n              playing controls/>\n            </div>\n            <div className =\"col-6\">\n             제목 : {props.곡.song}\n            </div>\n            </div>\n  \n\n        </Modal.Body>\n        <Modal.Footer>\n          \n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}","// GoogleButton.js\n\n\nimport React from 'react';\nimport GoogleLogin from 'react-google-login';\n\nconst clientId = \"886745805485-78tj2ngi133qkj1dk2j4bgaauda1qu60.apps.googleusercontent.com\";\n\nexport default function GoogleButton({ onSocial }){\n    const onSuccess = async(response) => {\n    \tconsole.log(response);\n    \n        const { googleId, profileObj : { email, name } } = response;\n        \n        await onSocial({\n            socialId : googleId,\n            socialType : 'google',\n            email,\n            nickname : name\n        });\n    }\n\n    const onFailure = (error) => {\n        console.log(error);\n    }\n\n    return(\n        <div>\n            <GoogleLogin\n                clientId={clientId}\n                responseType={\"id_token\"}\n                onSuccess={onSuccess}\n                onFailure={onFailure}/>\n        </div>\n    )\n}\n","import React from \"react\";\nimport { InputGroup,FormControl, Button} from \"react-bootstrap\";\n\nexport default function WritePage(){\n    return(\n        <>\n        <div className=\"row\">\n\n        <InputGroup className=\"mb-3\">\n            <InputGroup.Text id=\"title\">제목</InputGroup.Text>\n            <FormControl\n            aria-label=\"제목\"\n            aria-describedby=\"inputGroup-sizing-default\"\n            />\n        </InputGroup>\n        <InputGroup className=\"mb-3\">\n            <InputGroup.Text id=\"writer\">작성자</InputGroup.Text>\n            <FormControl\n            aria-label=\"writer\"\n            aria-describedby=\"inputGroup-sizing-default\"\n            />\n        </InputGroup>\n\n        <InputGroup>\n         <InputGroup.Text id =\"content\">내용</InputGroup.Text>\n         <FormControl as=\"textarea\" aria-label=\"내용\" />\n        </InputGroup>\n\n        </div>\n        <Button variant=\"secondary\" className=\"mt-8 mr-5\"\n         onclick={()=>{\n                // 여기에다가 값보내는 메소드 적으면 댐 axios.put\n        }}>저장</Button>\n        </>\n    )\n\n}","import React from 'react';\n\nexport default function Developer_intro(){\n    return(\n        <>\n        <p>신봉규</p>\n        <hr/>\n        <p>박찬현</p>\n        <hr/>\n        </>\n    )\n}","import React, { useEffect, useReducer, useState } from 'react';\nimport {\n  Button, Navbar, NavDropdown, Container, Carousel, Card, Row, Table, ListGroup, Suspense,\n  Figure, Spinner\n} from 'react-bootstrap';\nimport './App.css';\nimport { Link, Route, useHistory} from 'react-router-dom';\nimport axios from 'axios';\nimport AlertSong from './AlertSong.js'\nimport GoogleButton from './Google_login';\nimport WritePage from './Write';\nimport Developer_intro from './Developer';\n\n\nfunction App() {\n\n  let [수량, 수량변경] = useState([1, 2, 3]);\n  let history = useHistory();\n  let [loading, setLoading] = useState(true);\n  let [차트정보, 차트정보변경] = useState([]);\n  var [cardpage, setCardpage] = useState([1, 2, 3]);\n\n  useEffect(() => {\n    const htmlTitle = document.querySelector(\"title\");\n    htmlTitle.innerHTML = \"Btl831\";\n\n    axios.get(\"https://btl831.github.io/example1.json\")\n      .then((result) => { console.log(result.data); 차트정보변경(result.data); setLoading(false) })\n      .catch();\n\n  }, []);\n\n  if (loading) return (<>로딩중 <Spinner animation=\"border\" variant=\"primary\" className=\"spinner\" /></>);\n\n  return (\n\n    <div className=\"App\">\n      <head>\n        <link\n          rel=\"stylesheet\"\n          href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css\"\n          integrity=\"sha384-KyZXEAg3QhqLMpG8r+8fhAXLRk2vvoC2f3B09zVXn8CA5QIVfZOJ3BCsw2P0p/We\"\n          crossorigin=\"anonymous\"\n        />\n      </head>\n\n      {/* navbar */}\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n          <NavDropdown.Item href=\"/chart\">Top 100</NavDropdown.Item>\n          <NavDropdown.Item href=\"/write\">의견 적기</NavDropdown.Item>\n          <NavDropdown.Item href=\"#action/3.3\">의견 모음</NavDropdown.Item>\n          <NavDropdown.Divider />\n          <NavDropdown.Item href=\"/developer\">개발자 소개</NavDropdown.Item>\n        </NavDropdown>\n        <Container>\n          <Link to=\"\">\n            <Navbar.Brand href=\"#home\">\n              <img\n                alt=\"\"\n                src=\"/logo.svg\"\n                width=\"30\"\n                height=\"30\"\n                className=\"d-inline-block align-top\"\n              />{' '}\n              BTL 831 INTRO\n            </Navbar.Brand>\n          </Link>\n\n          <GoogleButton />\n        </Container>\n      </Navbar>\n\n\n\n      {/* 첫번째 라우트 */}\n\n      {/* 첫번째 섹션 */}\n      <body className=\"body\">\n        <div className=\"container\">\n\n          <Route exact path=\"/\">\n            <div className=\"row\">\n              <hr />\n\n              {/* 3페이지 짜리 카드 */}\n              <Carousel className=\"carousel\">\n                {\n                  cardpage.map((k, y) => {\n                    return (\n                      <Carousel.Item>\n                        <Row className=\"justify-content-md-center\">\n\n                          {\n                            \n                            차트정보.slice(3*y,3*(y+1)).map((a, i) => {\n                              return (<Card_Jumbo 곡={a} i={i} />)\n                            })\n                          }\n\n                        </Row>\n                      </Carousel.Item>\n                    )\n\n                  })\n                }\n\n              </Carousel>\n            </div>\n            <br />\n            <br />\n\n\n            {/* 두번째 섹션 */}\n            <div className=\"row\">\n              <div className=\"col-md-7 sub_title \">\n                <hr />\n                <h6 className=\"mt-1\">느낌별 Playlist</h6>\n                <hr />\n                <Container className=\"row\">\n                  <div className=\"col-md-5 box \">\n                    <Recommend />\n                  </div>\n\n                  <div className=\"col-md-5 box \">\n                    <Recommend />\n                  </div>\n                </Container>\n              </div>\n\n              <div className=\"col-md-5 \">\n\n                <h6 className=\"mr-10\">TOP 100 &nbsp;&nbsp;\n                  <Link to=\"/chart\"><Button className=\"secondary\" >더보기</Button></Link></h6>\n\n                <Chart 차트정보={차트정보.slice(undefined, 5)} />\n              </div>\n            </div>\n            <hr/>\n\n            {/* 네번째 섹션 */}\n            <div className=\"row\">\n              <h3 className =\"col-md-11\">추가요청 게시판</h3>\n              <Link to=\"/write\"className = \"col-md-1\"><Button >작성하기</Button></Link>\n              \n\n              <div className=\"col-md-4 mt-2\">\n                <Community></Community>\n\n              </div>\n              <div className=\"col-md-8 mt-2 sub_community\">\n                <a>여기에는 상세페이지 내용이 적힐 겁니다.</a>\n              </div>\n\n            </div>\n\n            {/* container 마무리 */}\n          </Route>\n          {/* <Route path = \"/title\" component = {Card_Jumbo}/> */}\n          <Route path=\"/chart\">\n            <br/>\n            <Chart 차트정보={차트정보} className=\"mt-20 mb-5\" />\n          </Route>\n          <Route path = \"/write\">\n            <div class = \"full\">\n              <br/>\n              <WritePage/>\n              <Button onClick={()=>{history.goBack()}}>돌아가기</Button>\n              </div>\n          </Route>\n        </div>\n\n          <Route path=\"/developer\" >\n            <div class= \"full\">\n            <Developer_intro/>\n            </div>\n          </Route>\n\n        <br />\n\n      </body>\n\n\n      \n\n      {/* footer */}\n      <footer className=\"py-4 bg-dark\">\n        <div className=\"container\">\n          <p className=\"m-0 text-center text-white\">\n            Copyright &copy; Btl_831 2021\n          </p>\n        </div>\n      </footer>\n\n\n    </div>\n\n  );\n}\n\nfunction Card_Jumbo(props) {\n  return (\n    <Card style={{ width: '18rem' }} className=\"j_card mt-5\" >\n      <Card.Img variant=\"top\" src=\"/IU.jpg\" className=\"mt-3\" />\n      <Card.Body>\n        <Card.Title>{props.곡.song}</Card.Title>\n        <Card.Text>\n          <p>가수 :{props.곡.singer} </p>\n\n        </Card.Text>\n\n        <AlertSong 곡={props.곡} i={props.i} />\n\n      </Card.Body>\n\n    </Card>\n  )\n}\n\nfunction Recommend() {\n  return (\n    <Figure className=\"mt-3\">\n      <Figure.Image\n        width={171}\n        height={180}\n        alt=\"171x180\"\n        src=\"/black_pink.jpg\"\n      />\n      <Figure.Caption>\n        오늘은 블랙핑크 노래로 하루를 시작해 봅시다.\n      </Figure.Caption>\n    </Figure>\n  )\n}\n\nfunction Chart(props) {\n  return (\n    <Table striped bordered hover variant=\"dark\">\n      <thead>\n        <tr>\n          <th>순위</th>\n          <th>앨범</th>\n          <th>제목</th>\n          <th>가수</th>\n          <th>듣기</th>\n        </tr>\n      </thead>\n      <tbody>\n\n        {\n          props.차트정보.map((a, i) => {\n            return (\n              <tr>\n                <td>{a.id + 1}</td>\n                <td><image src=\"IU.jpg\" /></td>\n                <td>{a.song}</td>\n                <td>{a.singer}</td>\n                <td><AlertSong 곡={a} i={i} /></td>\n              </tr>\n            )\n          })\n\n        }\n\n      </tbody>\n    </Table>\n  )\n}\n\nfunction Community() {\n  return (\n    <ListGroup variant=\"flush\">\n      <ListGroup.Item variant=\"secondary\">최근 게시물 1</ListGroup.Item>\n      <ListGroup.Item variant=\"secondary\">최근 게시물 2</ListGroup.Item>\n      <ListGroup.Item variant=\"secondary\">최근 게시물 3</ListGroup.Item>\n      <ListGroup.Item variant=\"secondary\">최근 게시물 4</ListGroup.Item>\n    </ListGroup>\n  )\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}